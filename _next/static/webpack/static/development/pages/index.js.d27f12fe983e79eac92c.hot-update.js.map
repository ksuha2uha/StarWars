{"version":3,"file":"static/webpack/static/development/pages/index.js.d27f12fe983e79eac92c.hot-update.js","sources":["webpack:///./components/randomPlanet/randomPlanet.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { StyledDetails, StyledDetailsWrapp, StyledDetailsImg, StyledDetailsList, StyledDetailsListItem, StyledName } from './randomPlanet.styled';\nimport { fetchPlanets, getRandomPlanet, setBrokenRandomPlanet } from \"../../actions\";\nimport NoSSR from '@mpth/react-no-ssr';\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport Spinner from \"../spinner/spinner\";\n\nconst RandomPlanet = ({ fetchPlanets, getRandomPlanet, randomPlanet, planets, isFetchingRandomPlanet, brokenRandomPlanet, setBrokenRandomPlanet }) => {\n  const serverImage =\n    <StyledDetailsImg\n      onError={() => setBrokenRandomPlanet()}\n      src={`https://starwars-visualguide.com/assets/img/planets/${randomPlanet.id}.jpg`} />\n  const brokenImg = brokenRandomPlanet ? <ErrorMessage /> : serverImage;\n\n  useEffect(() => {\n    fetchPlanets()\n  }, [])\n\n  useEffect(() => {\n    getRandomPlanet()\n\n    const interval = setInterval(() => {\n      getRandomPlanet()\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [planets]);\n\n  return (\n    // <NoSSR>\n    //   <>\n    //     <StyledDetails>\n    //       {isFetchingRandomPlanet ? <Spinner /> :\n    //         <>\n    //           {randomPlanet ?\n    //             <>\n    //               <StyledName>{randomPlanet.name}</StyledName>\n    //               {\n    //                 broken ? <ErrorMessage /> :\n    //                   <>\n    //                     <StyledDetailsImg onError={() => setBroken(true)}\n    //                       src={`https://starwars-visualguide.com/assets/img/planets/${randomPlanet.id}.jpg`} />\n    //                     <StyledDetailsList>\n    //                       <StyledDetailsWrapp>\n    //                         <div style={{ marginRight: '1em' }}>\n    //                           <StyledDetailsListItem>Population:{randomPlanet.population}</StyledDetailsListItem>\n    //                           <StyledDetailsListItem>Period: {randomPlanet.rotation_period}</StyledDetailsListItem>\n    //                           <StyledDetailsListItem>Orbital Period: {randomPlanet.orbital_period}</StyledDetailsListItem>\n    //                         </div>\n    //                         <div>\n    //                           <StyledDetailsListItem>Diameter:{randomPlanet.diameter}</StyledDetailsListItem>\n    //                           <StyledDetailsListItem>Climate:{randomPlanet.climate}</StyledDetailsListItem>\n    //                           <StyledDetailsListItem>Gravity:{randomPlanet.gravity}</StyledDetailsListItem>\n    //                         </div>\n    //                       </StyledDetailsWrapp>\n    //                     </StyledDetailsList>\n    //                   </>\n    //               }\n    //             </>\n    //             : null}\n    //         </>\n    //       }\n    //     </StyledDetails>\n\n    //   </>\n    // </NoSSR>\n\n    <NoSSR>\n      <StyledDetails>\n        {isFetchingRandomPlanet ? <Spinner /> :\n          <>\n            {randomPlanet ?\n              <>\n                <StyledName> {randomPlanet.name}</StyledName>\n                {brokenImg}\n                <StyledDetailsList>\n                  <StyledDetailsWrapp>\n                    <div style={{ marginRight: '1em' }}>\n                      <StyledDetailsListItem>Population:{randomPlanet.population}</StyledDetailsListItem>\n                      <StyledDetailsListItem>Period: {randomPlanet.rotation_period}</StyledDetailsListItem>\n                      <StyledDetailsListItem>Orbital Period: {randomPlanet.orbital_period}</StyledDetailsListItem>\n                    </div>\n                    <div>\n                      <StyledDetailsListItem>Diameter:{randomPlanet.diameter}</StyledDetailsListItem>\n                      <StyledDetailsListItem>Climate:{randomPlanet.climate}</StyledDetailsListItem>\n                      <StyledDetailsListItem>Gravity:{randomPlanet.gravity}</StyledDetailsListItem>\n                    </div>\n                  </StyledDetailsWrapp>\n                </StyledDetailsList>\n\n              </>\n              : null\n            }\n          </>\n        }\n      </StyledDetails >\n    </NoSSR >\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    planets: state.planets,\n    randomPlanet: state.randomPlanet,\n    isFetchingRandomPlanet: state.isFetchingRandomPlanet,\n    brokenRandomPlanet: state.brokenRandomPlanet\n  }\n}\n\n\n\nexport default connect(mapStateToProps, { fetchPlanets, getRandomPlanet, setBrokenRandomPlanet })(RandomPlanet);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzDA;AAsEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}