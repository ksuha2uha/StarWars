{"version":3,"file":"static/webpack/static/development/pages/people.js.ae5925d1bf51ff799f58.hot-update.js","sources":["webpack:///./components/randomPlanet/randomPlanet.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { StyledDetails, StyledDetailsWrapp, StyledDetailsImg, StyledDetailsList, StyledDetailsListItem, StyledName } from './randomPlanet.styled';\nimport { fetchPlanets, getRandomPlanet } from \"../../actions\";\nimport NoSSR from '@mpth/react-no-ssr';\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport Spinner from \"../spinner/spinner\";\n\nconst RandomPlanet = ({ fetchPlanets, getRandomPlanet, randomPlanet, planets, isFetchingRandomPlanet, brokenRandomPlanet }) => {\n  const serverImage =\n    <StyledDetailsImg\n      onError={() => setBroken()}\n      src={`https://starwars-visualguide.com/assets/img/planets/${randomPlanet.id}.jpg`} />\n  const brokenImg = brokenRandomPlanet ? <ErrorMessage /> : serverImage;\n\n  useEffect(() => {\n    fetchPlanets()\n  }, [])\n\n  useEffect(() => {\n    getRandomPlanet()\n\n    const interval = setInterval(() => {\n      getRandomPlanet()\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [planets]);\n\n  return (\n    <NoSSR>\n      <StyledDetails>\n        {isFetchingRandomPlanet ? <Spinner /> :\n          <>\n            <StyledName>{randomPlanet.name}</StyledName>\n            {brokenImg}\n            <StyledDetailsList>\n              <StyledDetailsWrapp>\n                <div style={{ marginRight: '1em' }}>\n                  <StyledDetailsListItem>Population:{randomPlanet.population}</StyledDetailsListItem>\n                  <StyledDetailsListItem>Period: {randomPlanet.rotation_period}</StyledDetailsListItem>\n                  <StyledDetailsListItem>Orbital Period: {randomPlanet.orbital_period}</StyledDetailsListItem>\n                </div>\n                <div>\n                  <StyledDetailsListItem>Diameter:{randomPlanet.diameter}</StyledDetailsListItem>\n                  <StyledDetailsListItem>Climate:{randomPlanet.climate}</StyledDetailsListItem>\n                  <StyledDetailsListItem>Gravity:{randomPlanet.gravity}</StyledDetailsListItem>\n                </div>\n              </StyledDetailsWrapp>\n            </StyledDetailsList>\n\n          </>\n        }\n      </StyledDetails>\n    </NoSSR>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    planets: state.planets,\n    randomPlanet: state.randomPlanet,\n    isFetchingRandomPlanet: state.isFetchingRandomPlanet,\n    brokenRandomPlanet: state.brokenRandomPlanet\n  }\n}\n\n\n\nexport default connect(mapStateToProps, { fetchPlanets, getRandomPlanet })(RandomPlanet);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAGA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}